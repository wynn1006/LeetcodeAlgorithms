public class Solution {
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        
        List<IList<int>> result = new List<IList<int>>();
        dfs(candidates, target, 0, 0, new List<int>(), result);
        
        return result;
    }
    
    
    void dfs(int[] candidates, int target, int l, int curVal, List<int> curList, List<IList<int>> result){
       
        if(target == 0 || curVal > target) return;
        if(curVal == target) { 
            result.Add(new List<int>(curList));
            return;
        }
        
        for(int i = l ; i < candidates.Length ; i++){
            curList.Add(candidates[i]);
            dfs(candidates, target, i, curVal + candidates[i], curList, result);
            curList.RemoveAt(curList.Count - 1);
        }     
    }
}
