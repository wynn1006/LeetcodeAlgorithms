public class Solution {
    public int[][] Merge(int[][] intervals) {
        if(intervals.Length <= 1) return intervals;
        quicksort(intervals, 0, intervals.Length - 1);
        //assume it is a sorted array
        
        List<int[]> result = new List<int[]>();
        result.Add(new int[2]{intervals[0][0], intervals[0][1]});
        int resultCount = 0;
        for(int i = 1 ; i < intervals.Length ; i++){
            if(intervals[i][0] <= result[resultCount][1] && intervals[i][1] >= result[resultCount][1]){
                result[resultCount][1] = intervals[i][1];
            } else if(intervals[i][1] <= result[resultCount][1]){
                continue;
            }else{
                result.Add(new int[2]{intervals[i][0], intervals[i][1]});
                resultCount ++;
            }
        }
        return result.ToArray();
    }
    private void quicksort(int[][] arr, int f, int r){
        if (r - f <= 0) return;
        int p = f, q = r; 
        int[] x = arr[f];
        while (p < q) {
            while (p < q && x[0] <= arr[q][0]) q--;
            if (p < q) arr[p] = arr[q];
            while (p < q && x[0] >= arr[p][0]) p++;
            if (p < q) arr[q] = arr[p];
            }
        arr[p] = x;
        quicksort(arr, f, p);
        quicksort(arr, p + 1, r);
    }
}
